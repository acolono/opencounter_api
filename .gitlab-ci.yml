# Running locally
# gitlab-ci-multi-runner exec docker --docker-privileged --env CI_PROJECT_NAME=slimcounter_ci --env CI_BUILD_REF=2 --env TAG=0.1.0 --env API_HOST=opencounter-slim-codenv-webserver build

# Fix for "Can't find "docker-compose" using the Docker-in-Docker image"
# https://gitlab.com/gitlab-com/support-forum/issues/950#note_15025732
image: tmaier/docker-compose:17.03
services:
  - docker:dind

# define different pipelines for our jobs
stages:
  - build
  - test
  - release
  - deploy

variables:
  CONTAINER_TEST_IMAGE: registry.acolono.net:444/rosenstrauch/php-fpm:$CI_BUILD_REF_SLUG
  CONTAINER_RELEASE_IMAGE: registry.acolono.net:444/rosenstrauch/php-fpm:latest
  BUILD_CLIENT_REPO: git@gitlab.com:rosenstrauch/opencounter_client_swiphler.git
  PROJECT_ROOT: ${CI_PROJECT_DIR}

build:client:
  stage: build
  image: edbizarro/gitlab-ci-pipeline-php:latest
  before_script:
    # Install ssh-agent if not already installed, it is required by Docker.
    # (change apt-get to yum if you use a CentOS-based image)
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)

    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
  script:
    - cd $PROJECT_ROOT/client-example/swyfler/app && composer install --no-dev --prefer-dist --no-interaction
    - chmod +x $PROJECT_ROOT/ci-scripts/build_client_dist
    - cd $PROJECT_ROOT && ci-scripts/build_client_dist
  artifacts:
      name: "$CI_BUILD_REF"
      untracked: true
      paths:
        - dist/client-build-artifact
      expire_in: 1 week


# get the built distribution artifacts without devtools to a place from where deployment will fetch it.
distribute:client:
  stage: deploy
  only:
    - master
    - develop
  # as alternative see https://github.com/KEY-TEC/drupal-8-keytec-demo-target
  image: ilyasemenov/gitlab-ci-git-push
  environment: dist_storage
  before_script:
    # Install ssh-agent if not already installed, it is required by Docker.
    # (change apt-get to yum if you use a CentOS-based image)
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)

    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
  script:
    - cd dist/client-build-artifact
    - git config --global user.email "gracer@gitlab.com"
    - git config --global user.name "grace the Builder"
    - git add --all
    - git commit -am"buildserver commit $CI_BUILD_REF"
    - git-push $BUILD_REPO $CI_BUILD_REF_NAME


# phpcodesniffer
# Make sure our source code adheres to coding standards.
build:phpcs:
  stage: build
  image: texthtml/phpcs
  script:
    - phpcs --version
    - phpcs --standard=psr2 --error-severity=1 --warning-severity=8 --report=full app/src

build:dependencies:
  stage: build
  before_script:
    # asking for docker info breaks phpcs stage so dont.
    #- docker info
    - echo $CI_SERVER_VERSION
    - echo $CI_BUILD_REF_SLUG
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.acolono.net:444
    # install ssh-agent
    - 'which ssh-agent || (apk update && apk add bash rsync openssh)'
    # run ssh-agent
    - eval $(ssh-agent -s)
    - which bash
    # add ssh key stored in SSH_PRIVATE_KEY variable to the agent store
    - /bin/bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'
  script:
  # tell app we are testing environment dotenv
  - cp .env.testing app/.env
  # start docker containers
  - docker-compose -f docker-compose.testing.yml up -d
  # deal with Host key verification failed.
  - docker exec opencounter-slim-codenv-php-fpm mkdir ~/.ssh || true
  - docker exec opencounter-slim-codenv-php-fpm sh -c "ssh-keyscan -H git.acolono.net >> ~/.ssh/known_hosts"
  # install dependencies with composer in php container
  - docker exec opencounter-slim-codenv-php-fpm php /usr/local/bin/composer install
  # cleanup after ourselves after tests
  after_script:
    - docker-compose -f docker-compose.testing.yml stop
  # keep vendor and bin around for later stages
  artifacts:
    name: "$CI_BUILD_REF"
    untracked: true
    paths:
    - app/vendor/
    - app/bin/
    - app/themes/
    expire_in: 1 week

# Run Behat and Phpspec tests.
test:
  # we want to use cache to load installed composer dependeicies from previous build step
  stage: test
  before_script:
    # asking for docker info breaks phpcs stage so dont.
    #- docker info
    - echo $CI_BUILD_REF
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.acolono.net:444
  script:
  # tell app we are in the testing environment via dotenv
  - cp .env.testing app/.env
  # TODO see if we can pull the prepared docker (from build stage) images from our own registry
  # start containers needed for testing
  - docker-compose -f docker-compose.testing.yml up -d
  # wait a bit for db
  - sleep 12
  # setup database for testing environment
  - docker exec opencounter-slim-codenv-php-fpm php /var/www/opencounter-slim-codenv/bin/phinx migrate -c /var/www/opencounter-slim-codenv/phinx.php --environment testing
  # seed demo users into database so we can test auth layer more easily not required anymore
  #- docker exec opencounter-slim-codenv-php-fpm php /var/www/opencounter-slim-codenv/bin/phinx seed:run -c /var/www/opencounter-slim-codenv/phinx.php --environment testing
  # run behat tests
  - docker exec opencounter-slim-codenv-php-fpm ./bin/behat -c ./behat.yml -v
  # run phpunit tests
  - docker exec opencounter-slim-codenv-php-fpm ./bin/phpunit --configuration ./tests/phpunit/phpunit.xml
  # run phpspec tests
  - docker exec opencounter-slim-codenv-php-fpm ./bin/phpspec run --format=pretty --config ./tests/phpspec/phpspec.yml -v
  after_script:
  # shouldnt be necessary but shutdown containers cleanly just in case
    - docker-compose -f docker-compose.testing.yml stop
  # cache behat report artifacts for publishing to pages during deploy step
  artifacts:
    name: "$CI_BUILD_REF"
    untracked: true
    paths:
    - app/tests/behat/reports/html/behat
    expire_in: 1 week

# TODO changelog & releasenotes
# When we merge code into master branch
# Then we want changelog to be generated
# And Changed changelog should be committed or attached as release notes to corresponding release (tag/version)
release:changelog:
  stage: release
  only:
    - tags
  image: ruby:2.3
  script:
    # make sure we have the gem to generate changelog (runner should already have this in its path)
    - gem install github_changelog_generator
    # generate changelog
    - github_changelog_generator acolono/opencounter_api
  artifacts:
    name: "$CI_BUILD_REF"
    untracked: true
    paths:
    - CHANGELOG.md
    expire_in: 1 week


pages:
  stage: release
  # here we actually only want to use our own acolono/php-fpm image
  # since we dont need a webserver or database.
  # see http://stackoverflow.com/questions/30233105/docker-compose-up-for-only-certain-containers

  only:
    - tags
  before_script:
    # asking for docker info breaks phpcs stage so dont.
    #- docker info
    - echo $CI_BUILD_REF
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.acolono.net:444
  script:
    # Fetch ready-built docker images from registry
    - docker-compose -f docker-compose.testing.yml pull
    # static swagger json for swaggercodegen or swaggereditor to consume
    - docker-compose -f docker-compose.testing.yml run opencounter-slim-codenv-php-fpm php ./bin/swagger public src configuration vendor/rosenstrauch/opencounter_api_core/src --bootstrap configuration/bootstrap.php --output /var/www/opencounter-slim-codenv/public/swagger.json
    # phpdocumentor preinstalled in the container
    - docker-compose -f docker-compose.testing.yml run opencounter-slim-codenv-php-fpm /usr/local/bin/phpdoc -d vendor/rosenstrauch/opencounter_api_core/src -d ./src -t ./public/docs/slimcounter --template="responsive-twig"
  after_script:
    # shouldnt be necessary but shutdown containers cleanly just in case
    - docker-compose -f docker-compose.testing.yml stop
  allow_failure: true
  # Store resulting swagger.json and phpdoc folder as artifacts
  artifacts:
    name: "$CI_BUILD_REF"
    untracked: true
    paths:
    - app/public/swagger.json
    - app/public/docs/slimcounter
    expire_in: 1 week

# Deploy Swagger Docs
# When we tag a new version.
# Then we use swagger-codegen-cli generate something useful from swagger.json created during "pages" job
deploy:swagger:
  stage: deploy
  before_script:
  # install ssh-agent
  - 'which ssh-agent || (apk update && apk add bash rsync openssh)'
  # run ssh-agent
  - eval $(ssh-agent -s)
  - which bash
  # add ssh key stored in SSH_PRIVATE_KEY variable to the agent store
  - /bin/bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'
  only:
    - tags
  script:
    # Generate Documentation from swagger.json from releases stage.
    - docker run -v /builds/open-counter/SlimCounter/docs/swagger/:/local swaggerapi/swagger-codegen-cli generate -i /local/json/swagger.json -l html -o /local/out/html/
    - echo "Deploy docs to https://ocdocs.artur.acolono.net/"
    - rsync -avuz --rsh="ssh -o StrictHostKeyChecking=no -l $DEPLOY_USER" docs/swagger $DEPLOY_USER@artur.acolono.net:/web
  environment:
    name: docs
    url: https://ocdocs.artur.acolono.net/
  artifacts:
    name: "$CI_BUILD_REF"
    untracked: true
    paths:
    - docs/swagger
    expire_in: 1 week


deploy:phpdoc:
  stage: deploy
  before_script:
  # install ssh-agent
  - 'which ssh-agent || (apk update && apk add bash rsync openssh)'
  # run ssh-agent
  - eval $(ssh-agent -s)
  - which bash
  # add ssh key stored in SSH_PRIVATE_KEY variable to the agent store
  - /bin/bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'
  only:
    - tags
  script:
    - echo "Deploy phpdocs to https://ocdocs.artur.acolono.net/docs"
    - rsync -avuz --rsh="ssh -o StrictHostKeyChecking=no -l $DEPLOY_USER" app/public/docs $DEPLOY_USER@artur.acolono.net:/web
  environment:
    name: docs
    url: https://ocdocs.artur.acolono.net/
  artifacts:
    name: "$CI_BUILD_REF"
    untracked: true
    paths:
    - docs/slimcounter
    expire_in: 1 week

deploy:behatreports:
  stage: deploy
  before_script:
  # install ssh-agent
  - 'which ssh-agent || (apk update && apk add bash rsync openssh)'
  # run ssh-agent
  - eval $(ssh-agent -s)
  - which bash
  # add ssh key stored in SSH_PRIVATE_KEY variable to the agent store
  - /bin/bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'
  only:
    - tags
  script:
    - ls ./app/tests/behat/reports/html
    - echo "Deploy docs to https://ocdocs.artur.acolono.net/reports/slimcounter"
    - rsync -avuz --rsh="ssh -o StrictHostKeyChecking=no -l $DEPLOY_USER" app/tests/behat/reports $DEPLOY_USER@artur.acolono.net:/web/reports/slimcounter
  environment:
    name: docs
    url: https://ocdocs.artur.acolono.net/
  artifacts:
    name: "$CI_BUILD_REF"
    untracked: true
    paths:
    - docs/slimcounter
    expire_in: 1 week


deploy:live:
  stage: deploy
  environment:
    name: live
    url: https://oc.artur.acolono.net/
  before_script:
  - echo "will be deployed in git post hook"
 # we want to use cache to load swagger.json from pages step
  script:
    - echo "will be deployed in git post hook"
  only:
    - tags
